{"version":3,"sources":["index.tsx"],"names":["LINKING_ERROR","Platform","select","ios","default","RNOtpVerify","NativeModules","OtpVerify","Proxy","get","Error","eventEmitter","NativeEventEmitter","getOtp","OS","console","warn","startOtpListener","handler","then","addListener","useOtpVerify","numberOfDigits","message","setMessage","otp","setOtp","timeoutError","setTimeoutError","hash","setHash","handleMessage","response","otpDigits","RegExp","exec","getHash","removeListener","startListener","stopListener","requestHint","removeAllListeners"],"mappings":"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","sourcesContent":["import { NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useEffect, useState } from 'react';\n\nconst LINKING_ERROR =\n  `The package 'react-native-otp-verify' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst RNOtpVerify = NativeModules.OtpVerify\n  ? NativeModules.OtpVerify\n  : new Proxy(\n      {},\n      {\n        get() {\n          throw new Error(LINKING_ERROR);\n        },\n      }\n    );\n\nconst eventEmitter = new NativeEventEmitter(RNOtpVerify);\n\ninterface OtpVerify {\n  getOtp: () => Promise<boolean>;\n  getHash: () => Promise<string[]>;\n  requestHint: () => Promise<string>;\n  startOtpListener: (\n    handler: (value: string) => any\n  ) => Promise<import('react-native').EmitterSubscription>;\n  addListener: (\n    handler: (value: string) => any\n  ) => import('react-native').EmitterSubscription;\n  removeListener: () => void;\n}\n\nexport async function getOtp(): Promise<boolean> {\n  if (Platform.OS === 'ios') {\n    console.warn('Not Supported on iOS');\n    return false;\n  }\n  return RNOtpVerify.getOtp();\n}\n\nexport function startOtpListener(\n  handler: (value: string) => any\n): Promise<import('react-native').EmitterSubscription> {\n  return getOtp().then(() => addListener(handler));\n}\n\nexport const useOtpVerify = ({ numberOfDigits } = { numberOfDigits: 0 }) => {\n  const [message, setMessage] = useState<string | null>(null);\n  const [otp, setOtp] = useState<string | null>(null);\n  const [timeoutError, setTimeoutError] = useState<boolean>(false);\n  const [hash, setHash] = useState<string[] | null>([]);\n\n  const handleMessage = (response: string) => {\n    if (response === 'Timeout Error.') {\n      setTimeoutError(true);\n    } else {\n      setMessage(response);\n      if (numberOfDigits && response) {\n        const otpDigits = new RegExp(`(\\\\d{${numberOfDigits}})`, 'g').exec(response);\n        if (otpDigits && otpDigits[1]) setOtp(otpDigits[1]);\n      }\n    }\n  };\n  useEffect(() => {\n    if (Platform.OS === 'ios') {\n      console.warn('Not Supported on iOS');\n      return;\n    }\n    getHash().then(setHash);\n    startOtpListener(handleMessage);\n    return () => {\n      removeListener();\n    };\n  }, []);\n  const startListener = () => {\n    if (Platform.OS === 'ios') {\n      console.warn('Not Supported on iOS');\n      return;\n    }\n    setOtp('');\n    setMessage('');\n    startOtpListener(handleMessage);\n  };\n  const stopListener = () => {\n    if (Platform.OS === 'ios') {\n      console.warn('Not Supported on iOS');\n      return;\n    }\n    removeListener();\n  };\n  return { otp, message, hash, timeoutError, stopListener, startListener };\n};\n\nexport async function getHash(): Promise<string[]> {\n  if (Platform.OS === 'ios') {\n    console.warn('Not Supported on iOS');\n    return [];\n  }\n  return RNOtpVerify.getHash();\n}\nexport async function requestHint(): Promise<string> {\n  if (Platform.OS === 'ios') {\n    console.warn('Not Supported on iOS');\n    return '';\n  }\n  return RNOtpVerify.requestHint();\n}\n\nexport function addListener(\n  handler: (value: string) => any\n): import('react-native').EmitterSubscription {\n  return eventEmitter.addListener(\n    'com.faizalshap.otpVerify:otpReceived',\n    handler\n  );\n}\n\nexport function removeListener(): void {\n  return eventEmitter.removeAllListeners(\n    'com.faizalshap.otpVerify:otpReceived'\n  );\n}\n\nconst OtpVerify: OtpVerify = {\n  getOtp,\n  getHash,\n  addListener,\n  removeListener,\n  startOtpListener,\n  requestHint,\n};\n\nexport default OtpVerify;\n"]}