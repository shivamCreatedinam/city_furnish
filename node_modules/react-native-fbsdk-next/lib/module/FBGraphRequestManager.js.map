{"version":3,"sources":["FBGraphRequestManager.ts"],"names":["NativeModules","NativeGraphRequestManager","FBGraphRequest","_verifyParameters","request","config","parameters","key","param","string","Error","FBGraphRequestManager","addRequest","requestBatch","push","requestCallbacks","callback","addBatchCallback","batchCallback","start","timeout","that","error","result","response","forEach","innerCallback","index"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,aAAR,QAA4B,cAA5B;AAEA,MAAMC,yBAAyB,GAAGD,aAAa,CAACE,cAAhD;;AAOA,SAASC,iBAAT,CAA2BC,OAA3B,EAAkD;AAAA;;AAChD,yBAAIA,OAAO,CAACC,MAAZ,4CAAI,gBAAgBC,UAApB,EAAgC;AAC9B,SAAK,MAAMC,GAAX,IAAkBH,OAAO,CAACC,MAAR,CAAeC,UAAjC,EAA6C;AAC3C,YAAME,KAAK,GAAGJ,OAAO,CAACC,MAAR,CAAeC,UAAf,CAA0BC,GAA1B,CAAd;;AAEA,UACE,OAAOC,KAAP,KAAiB,QAAjB,IACCA,KADD,aACCA,KADD,eACCA,KAAD,CAAmCC,MAFrC,EAGE;AACA;AACD;;AACD,YAAM,IAAIC,KAAJ,CACJ,qCACEH,GADF,GAEE,wBAFF,GAGE,2CAJE,CAAN;AAMD;AACF;AACF;;AAED,MAAMI,qBAAN,CAA4B;AAAA;AAAA,0CACU,EADV;;AAAA,8CAEsB,EAFtB;;AAAA,2CAGO,IAHP;AAAA;;AAK1B;AACF;AACA;AACEC,EAAAA,UAAU,CAACR,OAAD,EAA+C;AACvDD,IAAAA,iBAAiB,CAACC,OAAD,CAAjB;;AACA,SAAKS,YAAL,CAAkBC,IAAlB,CAAuBV,OAAvB;AACA,SAAKW,gBAAL,CAAsBD,IAAtB,CAA2BV,OAAO,CAACY,QAAnC;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,gBAAgB,CACdD,QADc,EAKS;AACvB,SAAKE,aAAL,GAAqBF,QAArB;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,KAAK,CAACC,OAAD,EAAmB;AACtB;AACA,UAAMC,IAAI,GAAG,IAAb;;AACA,UAAML,QAAQ,GAAG,CACfM,KADe,EAEfC,MAFe,EAGfC,QAHe,KAIZ;AACH,UAAIA,QAAJ,EAAc;AACZH,QAAAA,IAAI,CAACN,gBAAL,CAAsBU,OAAtB,CAA8B,CAACC,aAAD,EAAgBC,KAAhB,KAA0B;AACtD,cAAID,aAAJ,EAAmB;AACjBA,YAAAA,aAAa,CAACF,QAAQ,CAACG,KAAD,CAAR,CAAgB,CAAhB,CAAD,EAAqBH,QAAQ,CAACG,KAAD,CAAR,CAAgB,CAAhB,CAArB,CAAb;AACD;AACF,SAJD;AAKD;;AACD,UAAIN,IAAI,CAACH,aAAT,EAAwB;AACtBG,QAAAA,IAAI,CAACH,aAAL,CAAmBI,KAAnB,EAA0BC,MAA1B;AACD;AACF,KAfD;;AAiBAtB,IAAAA,yBAAyB,CAACkB,KAA1B,CAAgC,KAAKN,YAArC,EAAmDO,OAAO,IAAI,CAA9D,EAAiEJ,QAAjE;AACD;;AA7DyB;;AAgE5B,eAAeL,qBAAf","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @format\n */\nimport GraphRequest, {GraphRequestParameters} from './FBGraphRequest';\nimport {NativeModules} from 'react-native';\n\nconst NativeGraphRequestManager = NativeModules.FBGraphRequest;\n\nexport type Callback = (\n  error?: Record<string, unknown>,\n  result?: Record<string, unknown>,\n) => void;\n\nfunction _verifyParameters(request: GraphRequest) {\n  if (request.config?.parameters) {\n    for (const key in request.config.parameters) {\n      const param = request.config.parameters[key];\n\n      if (\n        typeof param === 'object' &&\n        (param as GraphRequestParameters)?.string\n      ) {\n        continue;\n      }\n      throw new Error(\n        \"Unexpected value for parameter '\" +\n          key +\n          \"'. Request parameters \" +\n          \"need to be objects with a 'string' field.\",\n      );\n    }\n  }\n}\n\nclass FBGraphRequestManager {\n  requestBatch: Array<GraphRequest> = [];\n  requestCallbacks: Array<Callback | undefined> = [];\n  batchCallback: Callback | null = null;\n\n  /**\n   * Add a graph request.\n   */\n  addRequest(request: GraphRequest): FBGraphRequestManager {\n    _verifyParameters(request);\n    this.requestBatch.push(request);\n    this.requestCallbacks.push(request.callback);\n    return this;\n  }\n\n  /**\n   * Add call back to the GraphRequestManager. Only one callback can be added.\n   * Note that invocation of the batch callback does not indicate success of every\n   * graph request made, only that the entire batch has finished executing.\n   */\n  addBatchCallback(\n    callback: (\n      error?: Record<string, unknown>,\n      result?: Record<string, unknown>,\n    ) => void,\n  ): FBGraphRequestManager {\n    this.batchCallback = callback;\n    return this;\n  }\n\n  /**\n   * Executes requests in a batch.\n   * Note that when there's an issue with network connection the batch callback\n   * behavior differs in Android and iOS.\n   * On iOS, the batch callback returns an error if the batch fails with a network error.\n   * On Android, the batch callback always returns {\"result\": \"batch finished executing\"}\n   * after the batch time out. This is because detecting network status requires\n   * extra permission and it's unncessary for the sdk. Instead, you can use the NetInfo module\n   * in react-native to get the network status.\n   */\n  start(timeout?: number) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    const callback = (\n      error: Record<string, unknown>,\n      result: Record<string, unknown>,\n      response: Array<Array<Record<string, unknown>>>,\n    ) => {\n      if (response) {\n        that.requestCallbacks.forEach((innerCallback, index) => {\n          if (innerCallback) {\n            innerCallback(response[index][0], response[index][1]);\n          }\n        });\n      }\n      if (that.batchCallback) {\n        that.batchCallback(error, result);\n      }\n    };\n\n    NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n  }\n}\n\nexport default FBGraphRequestManager;\n"]}